{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","src/app/model/constances/BoardSize.ts","src/app/model/Types.ts","src/app/model/pieces/Piece.ts","src/app/model/pieces/Bishop.ts","src/app/model/pieces/Knight.ts","src/app/model/pieces/Pawn.ts","src/app/model/pieces/Queen.ts","src/app/model/pieces/Rook.ts","src/app/model/pieces/King.ts","src/app/model/pieces/index.ts","src/app/model/constances/PiecesStartPosition.ts","src/app/model/constances/index.ts","src/app/model/Chessboard.ts","src/app/model/HelperFunctions.ts","src/app/model/ChessEngine.ts","src/app/model/index.ts","src/app/presenter/ChessBoardPresenter.ts","src/app/view/web/Square.ts","src/app/view/web/Chessboard.ts","src/app/view/events/SquareWasClicked.ts","src/app/view/events/PromotionChosenPiece.ts","src/app/view/web/WebChessView.ts","src/app/view/events/InMemoryViewEventBus.ts","src/app/App.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.4b09dfc1.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","export const BOARD_SIZE = 8;\n","import { Piece } from './pieces';\n\nexport const columns = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\nexport type Column = typeof columns[number];\nexport type Row = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\nexport type Square = { column: Column; row: Row };\nexport enum Side {\n  WHITE = 'WHITE',\n  BLACK = 'BLACK',\n}\nexport type SquareWithPiece = { [key: string]: Piece };\nexport type Vector = { col: number; row: number };\n","import { columns, Row, Side, Square, Vector } from '../Types';\nimport { PiecePositions } from '../PiecesPositions';\nimport { BOARD_SIZE } from '../constances/BoardSize';\n\nexport abstract class Piece {\n  protected constructor(public side: Side) {}\n\n  abstract name: string;\n  abstract possibleMoves(position: Square, board: PiecePositions): Square[];\n\n  protected lineMoves(board: PiecePositions, actualPosition: Square, vector: Vector): Square[] {\n    const nextSquare: Square = {\n      column: columns[columns.indexOf(actualPosition.column) + vector.col],\n      row: (actualPosition.row + vector.row) as Row,\n    };\n    const isWithinChessboard = Piece.isWithinChessboardBorders(nextSquare);\n    if (!isWithinChessboard) {\n      return [];\n    }\n    const isSquareOccupied = board.onPositionPiece(nextSquare);\n    if (isSquareOccupied) {\n      return this.checkIfNotSameColorPiece(nextSquare, board) ? [nextSquare] : [];\n    } else {\n      return [nextSquare].concat(this.lineMoves(board, nextSquare, vector));\n    }\n  }\n\n  protected static isWithinChessboardBorders(position: Square): boolean {\n    const columnNumber = columns.indexOf(position.column);\n    return columnNumber < BOARD_SIZE && columnNumber >= 0 && position.row <= BOARD_SIZE && position.row > 0;\n  }\n\n  protected checkIfNotSameColorPiece(position: Square, board: PiecePositions): boolean {\n    return board.onPositionPiece(position)?.side !== this.side;\n  }\n\n  isOpponentOf(anotherPiece: Piece): boolean {\n    return anotherPiece.side !== this.side;\n  }\n}\n","import { PiecePositions } from '../PiecesPositions';\nimport { Piece } from './Piece';\nimport { Side, Square } from '../Types';\nimport { PiecePossibleMoves } from '../PiecePossibleMoves';\n\nexport class Bishop extends Piece implements PiecePossibleMoves {\n  readonly name = 'Bishop';\n  constructor(side: Side) {\n    super(side);\n  }\n\n  possibleMoves(position: Square, board: PiecePositions): Square[] {\n    return [\n      ...this.lineMoves(board, position, { row: -1, col: -1 }),\n      ...this.lineMoves(board, position, { row: -1, col: 1 }),\n      ...this.lineMoves(board, position, { row: 1, col: 1 }),\n      ...this.lineMoves(board, position, { row: 1, col: -1 }),\n    ];\n  }\n}\n","import { PiecePositions } from '../PiecesPositions';\nimport { Piece } from './Piece';\nimport { PiecePossibleMoves } from '../PiecePossibleMoves';\nimport { columns, Row, Side, Square } from '../Types';\n\nexport class Knight extends Piece implements PiecePossibleMoves {\n  readonly name = 'Knight';\n  constructor(side: Side) {\n    super(side);\n  }\n\n  possibleMoves(position: Square, board: PiecePositions): Square[] {\n    return this.removeSquaresWithAllyPieces(Knight.movesOnEmptyBoard(position), board);\n  }\n\n  private static movesOnEmptyBoard(position: Square): Square[] {\n    const currentColumnNumber = columns.indexOf(position.column);\n    const currentRowNumber = position.row;\n\n    return [\n      { column: columns[currentColumnNumber + 2], row: (currentRowNumber + 1) as Row },\n      { column: columns[currentColumnNumber + 2], row: (currentRowNumber - 1) as Row },\n      { column: columns[currentColumnNumber + 1], row: (currentRowNumber + 2) as Row },\n      { column: columns[currentColumnNumber + 1], row: (currentRowNumber - 2) as Row },\n      { column: columns[currentColumnNumber - 1], row: (currentRowNumber + 2) as Row },\n      { column: columns[currentColumnNumber - 1], row: (currentRowNumber - 2) as Row },\n      { column: columns[currentColumnNumber - 2], row: (currentRowNumber + 1) as Row },\n      { column: columns[currentColumnNumber - 2], row: (currentRowNumber - 1) as Row },\n    ].filter(Knight.isWithinChessboardBorders);\n  }\n\n  private removeSquaresWithAllyPieces(movesToGoOnEmptyBoard: Square[], board: PiecePositions): Square[] {\n    const movesToGo = movesToGoOnEmptyBoard.filter((checkedPosition) => {\n      return board.onPositionPiece(checkedPosition)?.side !== this.side;\n    });\n    return movesToGo as Square[];\n  }\n}\n","import { PiecePositions } from '../PiecesPositions';\nimport { Piece } from './Piece';\nimport { PiecePossibleMoves } from '../PiecePossibleMoves';\nimport { columns, Row, Side, Square } from '../Types';\n\ntype RowDifference = 1 | -1;\nconst NEXT_ROW_DIFFERENCE: { WHITE: RowDifference; BLACK: RowDifference } = {\n  WHITE: 1,\n  BLACK: -1,\n};\n\nexport class Pawn extends Piece implements PiecePossibleMoves {\n  readonly name = 'Pawn';\n  constructor(side: Side) {\n    super(side);\n  }\n\n  possibleMoves(position: Square, board: PiecePositions): Square[] {\n    const aheadSquare = { column: position.column, row: (position.row + 1 * this.nextRowDifference()) as Row };\n    const doubleAheadSquare = { column: position.column, row: (position.row + 2 * this.nextRowDifference()) as Row };\n    const aheadMoves: Square[] = this.isOnStartingPosition(position) ? [aheadSquare, doubleAheadSquare] : [aheadSquare];\n    return this.normalMoves(board, aheadMoves).concat(this.captureMoves(position, board));\n  }\n\n  private normalMoves(board: PiecePositions, aheadMoves: Square[]): Square[] {\n    if (aheadMoves.length === 0) {\n      return [];\n    }\n    const [nextMove, ...otherMoves] = aheadMoves;\n    const isPieceOnNextSquare = board.onPositionPiece(nextMove) !== undefined;\n    return isPieceOnNextSquare ? [] : [nextMove, ...this.normalMoves(board, otherMoves)];\n  }\n\n  private nextRowDifference(): RowDifference {\n    return NEXT_ROW_DIFFERENCE[this.side];\n  }\n\n  private isOnStartingPosition(position: Square) {\n    return (position.row === 2 && this.side === Side.WHITE) || (position.row === 7 && this.side === Side.BLACK);\n  }\n\n  private captureMoves(position: Square, board: PiecePositions): Square[] {\n    const movesToGo: Square[] = [];\n    const currentColumnNumber = columns.indexOf(position.column);\n    const currentRowNumber = position.row;\n\n    const rightDiagonal: Square = {\n      column: columns[currentColumnNumber + 1],\n      row: (currentRowNumber + 1 * this.nextRowDifference()) as Row,\n    };\n    if (board.onPositionPiece(rightDiagonal) && this.checkIfNotSameColorPiece(rightDiagonal, board)) {\n      movesToGo.push(rightDiagonal);\n    }\n\n    const leftDiagonal: Square = {\n      column: columns[currentColumnNumber - 1],\n      row: (currentRowNumber + 1 * this.nextRowDifference()) as Row,\n    };\n    if (board.onPositionPiece(leftDiagonal) && this.checkIfNotSameColorPiece(leftDiagonal, board)) {\n      movesToGo.push(leftDiagonal);\n    }\n\n    return movesToGo;\n  }\n}\n","import { PiecePositions } from '../PiecesPositions';\nimport { Piece } from './Piece';\nimport { Side, Square } from '../Types';\nimport { PiecePossibleMoves } from '../PiecePossibleMoves';\n\nexport class Queen extends Piece implements PiecePossibleMoves {\n  readonly name = 'Queen';\n  constructor(side: Side) {\n    super(side);\n  }\n\n  possibleMoves(position: Square, board: PiecePositions): Square[] {\n    return [\n      ...this.lineMoves(board, position, { col: 0, row: -1 }),\n      ...this.lineMoves(board, position, { col: 0, row: 1 }),\n      ...this.lineMoves(board, position, { col: -1, row: 0 }),\n      ...this.lineMoves(board, position, { col: 1, row: 0 }),\n      ...this.lineMoves(board, position, { row: -1, col: -1 }),\n      ...this.lineMoves(board, position, { row: -1, col: 1 }),\n      ...this.lineMoves(board, position, { row: 1, col: 1 }),\n      ...this.lineMoves(board, position, { row: 1, col: -1 }),\n    ];\n  }\n}\n","import { PiecePositions } from '../PiecesPositions';\nimport { Piece } from './Piece';\nimport { PiecePossibleMoves } from '../PiecePossibleMoves';\nimport { Side, Square } from '../Types';\n\nexport class Rook extends Piece implements PiecePossibleMoves {\n  readonly name = 'Rook';\n  constructor(side: Side) {\n    super(side);\n  }\n\n  possibleMoves(position: Square, board: PiecePositions): Square[] {\n    return [\n      ...this.lineMoves(board, position, { col: 0, row: -1 }),\n      ...this.lineMoves(board, position, { col: 0, row: 1 }),\n      ...this.lineMoves(board, position, { col: -1, row: 0 }),\n      ...this.lineMoves(board, position, { col: 1, row: 0 }),\n    ];\n  }\n}\n","import { PiecePositions } from '../PiecesPositions';\nimport { Piece } from './Piece';\nimport { columns, Row, Side, Square } from '../Types';\nimport { PiecePossibleMoves } from '../PiecePossibleMoves';\n\nexport class King extends Piece implements PiecePossibleMoves {\n  readonly name = 'King';\n  constructor(side: Side) {\n    super(side);\n  }\n\n  possibleMoves(position: Square, board: PiecePositions): Square[] {\n    const currentColumnNumber = columns.indexOf(position.column);\n    const currentRowNumber = position.row;\n    return [\n      { column: columns[currentColumnNumber - 1], row: (currentRowNumber - 1) as Row },\n      { column: columns[currentColumnNumber - 1], row: currentRowNumber as Row },\n      { column: columns[currentColumnNumber - 1], row: (currentRowNumber + 1) as Row },\n      { column: columns[currentColumnNumber], row: (currentRowNumber - 1) as Row },\n      { column: columns[currentColumnNumber], row: (currentRowNumber + 1) as Row },\n      { column: columns[currentColumnNumber + 1], row: (currentRowNumber - 1) as Row },\n      { column: columns[currentColumnNumber + 1], row: currentRowNumber as Row },\n      { column: columns[currentColumnNumber + 1], row: (currentRowNumber + 1) as Row },\n    ]\n      .filter(King.isWithinChessboardBorders)\n      .filter((square) => this.checkIfNotSameColorPiece(square, board));\n  }\n}\n","export * from './Bishop';\nexport * from './Knight';\nexport * from './Pawn';\nexport * from './Piece';\nexport * from './Queen';\nexport * from './Rook';\nexport * from './King';\n","import { Side, SquareWithPiece } from '../Types';\nimport { Bishop, King, Knight, Pawn, Queen, Rook } from '../pieces';\n\nexport const PIECES_START_POSITION: SquareWithPiece = {\n  A1: new Rook(Side.WHITE),\n  B1: new Knight(Side.WHITE),\n  C1: new Bishop(Side.WHITE),\n  D1: new Queen(Side.WHITE),\n  E1: new King(Side.WHITE),\n  F1: new Bishop(Side.WHITE),\n  G1: new Knight(Side.WHITE),\n  H1: new Rook(Side.WHITE),\n  A2: new Pawn(Side.WHITE),\n  B2: new Pawn(Side.WHITE),\n  C2: new Pawn(Side.WHITE),\n  D2: new Pawn(Side.WHITE),\n  E2: new Pawn(Side.WHITE),\n  F2: new Pawn(Side.WHITE),\n  G2: new Pawn(Side.WHITE),\n  H2: new Pawn(Side.WHITE),\n  A8: new Rook(Side.BLACK),\n  B8: new Knight(Side.BLACK),\n  C8: new Bishop(Side.BLACK),\n  D8: new Queen(Side.BLACK),\n  E8: new King(Side.BLACK),\n  F8: new Bishop(Side.BLACK),\n  G8: new Knight(Side.BLACK),\n  H8: new Rook(Side.BLACK),\n  A7: new Pawn(Side.BLACK),\n  B7: new Pawn(Side.BLACK),\n  C7: new Pawn(Side.BLACK),\n  D7: new Pawn(Side.BLACK),\n  E7: new Pawn(Side.BLACK),\n  F7: new Pawn(Side.BLACK),\n  G7: new Pawn(Side.BLACK),\n  H7: new Pawn(Side.BLACK),\n};\n","export * from './BoardSize';\nexport * from './PiecesStartPosition';\n","import { PiecePositions } from './PiecesPositions';\nimport { Piece } from './pieces';\nimport { Square, SquareWithPiece } from './Types';\nimport { PieceMoves } from './PieceMoves';\nimport { PIECES_START_POSITION } from './constances';\n\nexport class Chessboard implements PieceMoves, PiecePositions {\n  constructor(public squaresWithPiece: SquareWithPiece = PIECES_START_POSITION) {}\n\n  onPositionPiece(square: Square): Piece | undefined {\n    return this.squaresWithPiece[`${square.column}${square.row}`];\n  }\n\n  movePiece(squareFrom: Square, squareTo: Square): void {\n    const piece = this.onPositionPiece(squareFrom);\n    if (!piece) {\n      throw new Error(`There is no piece on square!`);\n    }\n    delete this.squaresWithPiece[`${squareFrom.column}${squareFrom.row}`];\n    this.squaresWithPiece[`${squareTo.column}${squareTo.row}`] = piece;\n  }\n\n  removePiece(square: Square): void {\n    delete this.squaresWithPiece[`${square.column}${square.row}`];\n  }\n}\n","export function isDefined<T>(x: T | undefined): x is T {\n  return typeof x !== 'undefined' && x !== null;\n}\n\nexport function isNotDefined<T>(x: T | undefined): x is undefined {\n  return !isDefined(x);\n}\n","import { ChessModel } from './ChessModel';\nimport { Bishop, King, Knight, Pawn, Piece, Queen, Rook } from './pieces';\nimport { Column, columns, Row, Side, Square, SquareWithPiece } from './Types';\nimport { Chessboard } from './Chessboard';\nimport { PieceWasMoved } from './PieceWasMoved';\nimport { PieceWasCaptured } from './PieceWasCaptured';\nimport { PawnPromotionWasEnabled } from './PawnPromotionWasEnabled';\nimport { isDefined } from './HelperFunctions';\nimport { KingWasChecked } from './KingWasChecked';\nimport { KingWasUnchecked } from './KingWasUnchecked';\nimport { MoveResult } from './MoveResult';\nimport { PawnWasPromoted } from './PawnWasPromoted';\nimport { CheckmateHasOccurred } from './CheckmateHasOccurred';\nimport { StalemateHasOccurred } from './StalemateHasOccurred';\n\ntype CheckedKing = { kingSide: Side; position: Square };\n\nexport class ChessEngine implements ChessModel {\n  private currentSide: Side = Side.WHITE;\n  readonly squaresWithPiece: SquareWithPiece;\n  private promotingOnSquare: Square | undefined;\n  private checkedKing: CheckedKing | undefined;\n  private moveHistory: PieceWasMoved[] = [];\n  private lastMove: PieceWasMoved | undefined;\n\n  constructor(private readonly board: Chessboard) {\n    this.squaresWithPiece = board.squaresWithPiece;\n  }\n\n  move(squareFrom: Square, squareTo: Square): MoveResult[] {\n    const chosenPiece = this.board.onPositionPiece(squareFrom);\n    if (!chosenPiece) {\n      throw new Error('There is no piece on this square.');\n    }\n    if (this.promotingOnSquare) {\n      throw new Error('No move is possible until promotion is done.');\n    }\n    if (chosenPiece.side !== this.currentSide) {\n      throw new Error(`It's not Your turn.`);\n    }\n    if (!this.canMoveOnSquare(squareFrom, squareTo)) {\n      throw new Error('Piece can not move to given square.');\n    }\n\n    const pieceWasMoved: PieceWasMoved = {\n      eventType: 'PieceWasMoved',\n      piece: chosenPiece,\n      from: squareFrom,\n      to: squareTo,\n    };\n\n    const castlingWasDone = this.castlingWasDone(squareFrom, squareTo);\n    let pieceWasCaptured;\n    if (this.lastMove && this.canAttackInPassing(squareFrom, this.lastMove)) {\n      pieceWasCaptured = this.pieceWasCapturedInPassing(this.lastMove);\n      this.onPawnCaptureInPassing(this.lastMove);\n    } else {\n      pieceWasCaptured = this.pieceWasCaptured(squareTo, chosenPiece);\n    }\n\n    const pawnPromotionWasEnabled = this.pawnPromotionWasEnabled(chosenPiece, squareTo);\n    this.onPawnPromotionWasEnabled(pawnPromotionWasEnabled);\n    this.onPieceWasMoved(pieceWasMoved);\n\n    const kingWasChecked = this.kingWasChecked(chosenPiece);\n    if (kingWasChecked) {\n      this.onKingWasChecked(kingWasChecked);\n    }\n    const kingWasUnchecked = this.kingWasUnchecked();\n    if (kingWasUnchecked) {\n      this.onKingWasUnchecked(kingWasUnchecked);\n    }\n    const checkmateHasOccurred = this.checkmateHasOccurred();\n    const stalemateHasOccurred = this.stalemateHasOccurred();\n    this.lastMove = pieceWasMoved;\n\n    return [\n      pieceWasCaptured,\n      pieceWasMoved,\n      kingWasChecked,\n      kingWasUnchecked,\n      checkmateHasOccurred,\n      stalemateHasOccurred,\n      pawnPromotionWasEnabled,\n      castlingWasDone,\n    ].filter(this.hasOccurred);\n  }\n\n  pawnWasPromoted(chosenPiece: string): PawnWasPromoted | undefined {\n    if (!this.promotingOnSquare) {\n      return undefined;\n    }\n\n    const onSquarePromotion = this.promotingOnSquare;\n    const pawnToRemove = this.squaresWithPiece[this.translateSquareToAlgebraicNotationCapital(onSquarePromotion)];\n    const createChosenPiece = this.objectCreator(chosenPiece, pawnToRemove.side);\n    this.squaresWithPiece[this.translateSquareToAlgebraicNotationCapital(onSquarePromotion)] = createChosenPiece;\n    this.promotingOnSquare = undefined;\n    this.currentSide = this.anotherSide(this.currentSide);\n\n    return {\n      eventType: 'PawnWasPromoted',\n      onSquare: onSquarePromotion,\n      chosenPiece: createChosenPiece,\n    };\n  }\n\n  private translateSquareToAlgebraicNotationCapital(square: Square): string {\n    return `${square.column}${square.row}`;\n  }\n\n  private objectCreator(pieceName: string, side: Side): Knight | Rook | Bishop | Queen {\n    switch (pieceName) {\n      case 'Queen':\n        return new Queen(side);\n      case 'Rook':\n        return new Rook(side);\n      case 'Bishop':\n        return new Bishop(side);\n      case 'Knight':\n        return new Knight(side);\n      default:\n        throw new Error();\n    }\n  }\n\n  public possibleMoves(pieceMovingFrom: Square): Square[] {\n    const possibleMoves = this.board.onPositionPiece(pieceMovingFrom)?.possibleMoves(pieceMovingFrom, this.board) ?? [];\n    const castlingMoves = this.castlingMoves(pieceMovingFrom);\n    const enPassantMoves = this.enPassantMoves(pieceMovingFrom);\n    return this.pieceMovesNotCausingAllyKingCheck(pieceMovingFrom, [...possibleMoves, ...castlingMoves, ...enPassantMoves]);\n  }\n\n  private enPassantMoves(squareFrom: Square): Square[] {\n    if (this.lastMove && this.canAttackInPassing(squareFrom, this.lastMove)) {\n      const additionalSquareToAttack: Square =\n        this.lastMove.piece.side === Side.WHITE ? this.squareDown(this.lastMove.to) : this.squareUp(this.lastMove.to);\n      return [additionalSquareToAttack];\n    } else {\n      return [];\n    }\n  }\n\n  private castlingMoves(pieceMovingFrom: Square): Square[] {\n    if (!this.isKingMovingFromStartingPosition(pieceMovingFrom)) {\n      return [];\n    }\n    return this.kingsMovesForCastling(pieceMovingFrom).filter((squareTo) => this.isCastlingPossible(pieceMovingFrom, squareTo));\n  }\n\n  private isKingMovingFromStartingPosition(squareFrom: Square): boolean {\n    const chosenPiece = this.board.onPositionPiece(squareFrom);\n    const startingPosition = {\n      WHITE: { column: 'E', row: 1 } as Square,\n      BLACK: { column: 'E', row: 8 } as Square,\n    };\n    return chosenPiece instanceof King && this.isSameSquare(squareFrom, startingPosition[chosenPiece.side]);\n  }\n\n  private kingsMovesForCastling(kingPosition: Square): Square[] {\n    return [\n      { column: 'C', row: kingPosition.row },\n      { column: 'G', row: kingPosition.row },\n    ];\n  }\n\n  private isSameSquare(squareA: Square, squareB: Square) {\n    return squareA.column === squareB.column && squareA.row === squareB.row;\n  }\n\n  private isCastlingPossible(kingSquareFrom: Square, kingSquareTo: Square): boolean {\n    let squareCrossedByKing!: Square;\n    let rookPosition!: Square;\n    let moveDirection!: number;\n    switch (kingSquareTo.column) {\n      case 'C':\n        squareCrossedByKing = { column: 'D', row: kingSquareTo.row };\n        rookPosition = { column: 'A', row: kingSquareTo.row };\n        moveDirection = -1;\n        break;\n      case 'G':\n        squareCrossedByKing = { column: 'F', row: kingSquareTo.row };\n        rookPosition = { column: 'H', row: kingSquareTo.row };\n        moveDirection = 1;\n        break;\n    }\n    return !(\n      this.isKingChecked(this.board, this.currentSide) ||\n      this.willBeKingChecked(kingSquareFrom, squareCrossedByKing) ||\n      this.willBeKingChecked(kingSquareFrom, kingSquareTo) ||\n      this.isAnyPieceBetweenKingAndRook(kingSquareFrom, rookPosition, moveDirection) ||\n      this.pieceWasAlreadyMoved(kingSquareFrom) ||\n      this.pieceWasAlreadyMoved(rookPosition)\n    );\n  }\n\n  private isAnyPieceBetweenKingAndRook(actualPosition: Square, rookPosition: Square, moveDirection: number): boolean {\n    const nextSquare: Square = {\n      column: columns[columns.indexOf(actualPosition.column) + moveDirection],\n      row: actualPosition.row,\n    };\n    if (nextSquare.column === rookPosition.column) {\n      return false;\n    }\n    const isSquareOccupied = this.board.onPositionPiece(nextSquare);\n    return isSquareOccupied ? true : this.isAnyPieceBetweenKingAndRook(nextSquare, rookPosition, moveDirection);\n  }\n\n  private pieceWasAlreadyMoved(squareWithPiece: Square) {\n    const piece = this.board.onPositionPiece(squareWithPiece);\n    return this.moveHistory?.some((move) => move.piece === piece && this.isSameSquare(move.from, squareWithPiece));\n  }\n\n  private pieceWasCaptured(squareTo: Square, chosenPiece: Piece): PieceWasCaptured | undefined {\n    const pieceOnSquare = this.board.onPositionPiece(squareTo);\n    return isDefined(pieceOnSquare) && pieceOnSquare.isOpponentOf(chosenPiece)\n      ? {\n          eventType: 'PieceWasCaptured',\n          piece: pieceOnSquare,\n          onSquare: squareTo,\n        }\n      : undefined;\n  }\n\n  private pieceWasCapturedInPassing(lastMove: PieceWasMoved): PieceWasCaptured | undefined {\n    return lastMove\n      ? {\n          eventType: 'PieceWasCaptured',\n          piece: lastMove.piece,\n          onSquare: lastMove.to,\n        }\n      : undefined;\n  }\n\n  private pawnPromotionWasEnabled(chosenPiece: Piece, squareTo: Square): PawnPromotionWasEnabled | undefined {\n    return chosenPiece instanceof Pawn &&\n      ((chosenPiece.side === Side.WHITE && squareTo.row === 8) || (chosenPiece.side === Side.BLACK && squareTo.row === 1))\n      ? {\n          eventType: 'PawnPromotionWasEnabled',\n          onSquare: squareTo,\n          pawn: chosenPiece as Pawn,\n        }\n      : undefined;\n  }\n\n  private onPieceWasMoved(event: PieceWasMoved): void {\n    this.board.movePiece(event.from, event.to);\n    this.moveHistory.push(event);\n    if (!this.promotingOnSquare) {\n      this.currentSide = this.anotherSide(event.piece.side);\n    }\n  }\n\n  private onPawnPromotionWasEnabled(event: PawnPromotionWasEnabled | undefined): void {\n    if (event) {\n      this.promotingOnSquare = event.onSquare;\n    }\n  }\n\n  private castlingWasDone(squareFrom: Square, squareTo: Square): PieceWasMoved | undefined {\n    if (!this.intendToCastling(squareFrom, squareTo)) {\n      return undefined;\n    }\n    const rookMove = {\n      ['C' as Column]: {\n        rookSquareFrom: { column: 'A', row: squareTo.row } as Square,\n        rookSquareTo: { column: 'D', row: squareTo.row } as Square,\n      },\n      ['G' as Column]: {\n        rookSquareFrom: { column: 'H', row: squareTo.row } as Square,\n        rookSquareTo: { column: 'F', row: squareTo.row } as Square,\n      },\n    };\n    this.board.movePiece(rookMove[squareTo.column].rookSquareFrom, rookMove[squareTo.column].rookSquareTo);\n    return {\n      eventType: 'PieceWasMoved',\n      piece: new Rook(this.currentSide),\n      from: rookMove[squareTo.column].rookSquareFrom,\n      to: rookMove[squareTo.column].rookSquareTo,\n    };\n  }\n\n  private intendToCastling(squareFrom: Square, squareTo: Square): boolean {\n    if (!this.isKingMovingFromStartingPosition(squareFrom)) {\n      return false;\n    }\n    const castling = {\n      WHITE: {\n        longTo: { column: 'C', row: 1 } as Square,\n        shortTo: { column: 'G', row: 1 } as Square,\n      },\n      BLACK: {\n        longTo: { column: 'C', row: 8 } as Square,\n        shortTo: { column: 'G', row: 8 } as Square,\n      },\n    };\n\n    return (\n      this.isSameSquare(squareTo, castling[this.currentSide].longTo) || this.isSameSquare(squareTo, castling[this.currentSide].shortTo)\n    );\n  }\n\n  private canMoveOnSquare(squareFrom: Square, squareTo: Square): boolean {\n    const piecePossibleMoves = this.possibleMoves(squareFrom);\n    return (\n      piecePossibleMoves?.some((possibleMove) => possibleMove.column === squareTo.column && possibleMove.row === squareTo.row) ?? false\n    );\n  }\n\n  private anotherSide(side: Side): Side {\n    return side === Side.WHITE ? Side.BLACK : Side.WHITE;\n  }\n\n  private simulatedChessboardAfterMove(squareFrom: Square, squareTo: Square): Chessboard {\n    const simulatedChessboard = new Chessboard({ ...this.board.squaresWithPiece });\n    simulatedChessboard.movePiece(squareFrom, squareTo);\n    return simulatedChessboard;\n  }\n\n  private kingPosition(chessboard: Chessboard, kingSide: Side): Square | undefined {\n    const { squaresWithPiece: squaresWithPieces } = chessboard;\n    const kingPositionKey = Object.keys(squaresWithPieces).find((key) => {\n      const isKingName = squaresWithPieces[key].name === 'King';\n      const isPlayerSide = squaresWithPieces[key].side === kingSide;\n      return isKingName && isPlayerSide;\n    });\n    return kingPositionKey\n      ? {\n          column: kingPositionKey[0],\n          row: Number(kingPositionKey[1]) as Row,\n        }\n      : undefined;\n  }\n\n  private isSquareChecked(chessboard: Chessboard, playerSide: Side, positionToControl: Square): boolean {\n    const squaresWithPieces = chessboard.squaresWithPiece;\n    return Object.keys(squaresWithPieces)\n      .map((squareKey) => ({\n        position: { column: squareKey[0], row: Number(squareKey[1]) as Row },\n        piece: squaresWithPieces[squareKey],\n      }))\n      .filter(({ piece }) => piece.side !== playerSide)\n      .map(({ position, piece }) => piece.possibleMoves(position, chessboard))\n      .some((piecePossibleMoves) =>\n        piecePossibleMoves.some((moveSquare) => moveSquare.column === positionToControl.column && moveSquare.row === positionToControl.row),\n      );\n  }\n\n  private isKingChecked(chessboard: Chessboard = this.board, kingSide: Side = this.currentSide): boolean {\n    const kingPosition = this.kingPosition(chessboard, kingSide);\n    return kingPosition ? this.isSquareChecked(chessboard, kingSide, kingPosition) : false;\n  }\n\n  private willBeKingChecked(squareFrom: Square, squareTo: Square): boolean {\n    const simulatedChessboard = this.simulatedChessboardAfterMove(squareFrom, squareTo);\n    return this.isKingChecked(simulatedChessboard, this.currentSide);\n  }\n\n  private pieceMovesNotCausingAllyKingCheck(squareFrom: Square, possibleMoves: Square[]): Square[] {\n    return possibleMoves.filter((possibleSquare: Square) => !this.willBeKingChecked(squareFrom, possibleSquare));\n  }\n\n  private hasOccurred<T>(x: T | undefined): x is T {\n    return typeof x !== 'undefined' && x !== null;\n  }\n\n  private onKingWasChecked(event: KingWasChecked): void {\n    this.checkedKing = { kingSide: event.king.side, position: event.onSquare };\n  }\n\n  private kingWasChecked(chosenPiece: Piece): KingWasChecked | undefined {\n    const kingsSide = chosenPiece.side === Side.WHITE ? Side.BLACK : Side.WHITE;\n    const kingPosition = this.kingPosition(this.board, kingsSide);\n    if (!kingPosition) {\n      return undefined;\n    }\n    const isKingChecked = this.isKingChecked(this.board, kingsSide);\n    return isKingChecked\n      ? {\n          eventType: 'KingWasChecked',\n          king: new King(kingsSide),\n          onSquare: kingPosition,\n        }\n      : undefined;\n  }\n\n  private kingWasUnchecked(): KingWasUnchecked | undefined {\n    if (!this.checkedKing) {\n      return undefined;\n    }\n    const isKingChecked = this.isKingChecked(this.board, this.checkedKing.kingSide);\n    return !isKingChecked\n      ? {\n          eventType: 'KingWasUnchecked',\n        }\n      : undefined;\n  }\n\n  private onKingWasUnchecked(event: KingWasUnchecked): void {\n    this.checkedKing = undefined;\n  }\n\n  private onPawnCaptureInPassing(lastMove: PieceWasMoved): void {\n    this.board.removePiece(lastMove.to);\n  }\n\n  private lastMoveWasFirstPawnMove(lastMove: PieceWasMoved): boolean {\n    if (lastMove.piece.side === Side.WHITE) {\n      return lastMove.from.row === 2 && lastMove.to.row === 4;\n    } else if (lastMove.piece.side === Side.BLACK) {\n      return lastMove.from.row === 7 && lastMove.to.row === 5;\n    } else {\n      return false;\n    }\n  }\n\n  private canAttackInPassing(squareFrom: Square, lastMove: PieceWasMoved): boolean {\n    return (\n      this.lastMoveWasFirstPawnMove(lastMove) && this.isAdjacentColumn(squareFrom, lastMove.from) && squareFrom.row === lastMove.to.row\n    );\n  }\n\n  private isAdjacentColumn(firstSquare: Square, secondSquare: Square): boolean {\n    return Math.abs(columns.indexOf(firstSquare.column) - columns.indexOf(secondSquare.column)) === 1;\n  }\n\n  private squareUp(startSquare: Square): Square {\n    return {\n      column: columns[columns.indexOf(startSquare.column)],\n      row: (startSquare.row + 1) as Row,\n    };\n  }\n\n  private squareDown(startSquare: Square): Square {\n    return {\n      column: columns[columns.indexOf(startSquare.column)],\n      row: (startSquare.row - 1) as Row,\n    };\n  }\n\n  private checkmateHasOccurred(): CheckmateHasOccurred | undefined {\n    if (!this.isKingChecked()) return undefined;\n    if (this.isAnyPossibleMoves()) return undefined;\n\n    const kingPosition = this.kingPosition(this.board, this.currentSide);\n    if (!kingPosition) return undefined;\n\n    return {\n      eventType: 'CheckmateHasOccurred',\n      king: new King(this.currentSide),\n      onSquare: kingPosition,\n    };\n  }\n\n  private stalemateHasOccurred(): StalemateHasOccurred | undefined {\n    if (this.isKingChecked()) return undefined;\n    if (this.isAnyPossibleMoves()) return undefined;\n\n    return {\n      eventType: 'StalemateHasOccurred',\n    };\n  }\n\n  private isAnyPossibleMoves() {\n    const squaresWithPieces = this.board.squaresWithPiece;\n    return Object.keys(squaresWithPieces)\n      .map((squareKey) => ({\n        position: { column: squareKey[0], row: Number(squareKey[1]) as Row },\n        piece: squaresWithPieces[squareKey],\n      }))\n      .filter(({ piece }) => piece.side == this.currentSide)\n      .some(({ position }) => this.possibleMoves(position).length);\n  }\n}\n","export * from './Chessboard';\nexport * from './ChessEngine';\nexport * from './ChessModel';\nexport * from './constances/BoardSize';\nexport * from './HelperFunctions';\nexport * from './PieceMoves';\nexport * from './PawnPromotionWasEnabled';\nexport * from './PiecePossibleMoves';\nexport * from './PiecesPositions';\nexport * from './PieceWasCaptured';\nexport * from './PieceWasMoved';\nexport * from './pieces';\nexport * from './Types';\nexport { PIECES_START_POSITION } from './constances/PiecesStartPosition';\n","import { ChessBoardView } from '../view/ChessBoardView';\nimport { Position } from './Position';\nimport { ChessModel, columns, Row, Square } from '../model';\nimport { SquareWasClicked } from '../view/events/SquareWasClicked';\nimport { MoveResult } from '../model/MoveResult';\nimport { PromotionChosenPiece } from '../view/events/PromotionChosenPiece';\n\nexport class ChessBoardPresenter {\n  constructor(private readonly view: ChessBoardView, private readonly chessModel: ChessModel) {\n    view.listenOn<SquareWasClicked>('SquareWasClicked', (event) => {\n      this.onSquareWasClicked(event.position);\n    });\n    view.listenOn<PromotionChosenPiece>('PromotionChosenPiece', (event) => {\n      this.onPromotionPieceWasClicked(event.chosenPiece);\n    });\n  }\n\n  private lastPossibleMoves: string[] = [];\n  private lastMoveAsPosition: Position = { x: 0, y: 0 };\n\n  onPromotionPieceWasClicked(chosenPiece: string): void {\n    const pawnWasPromoted = this.chessModel.pawnWasPromoted(chosenPiece);\n    if (pawnWasPromoted) {\n      this.view.afterPromotionPiece(\n        this.translateSquareToAlgebraicNotation(pawnWasPromoted.onSquare),\n        pawnWasPromoted.chosenPiece.name.toLowerCase(),\n        pawnWasPromoted.chosenPiece.side,\n      );\n    }\n  }\n\n  onSquareWasClicked(position: Position): void {\n    this.view.hideSelection();\n    this.view.showSelectedPiece(this.translatePositionToAlgebraicNotation(position));\n    this.view.hideAllAvailableMoves();\n    const squaresStringArray = this.getPossibleMoves(position);\n    this.view.showAvailableMoves(squaresStringArray);\n\n    this.pieceMovement(position, squaresStringArray);\n  }\n\n  startGame(): void {\n    this.view.showChessBoard(this.chessModel.squaresWithPiece);\n  }\n\n  private getPossibleMoves(position: Position): string[] {\n    const square: Square = { column: columns[position.x - 1], row: position.y as Row };\n    return this.chessModel.possibleMoves(square)?.map((square) => `${square.column.toLowerCase()}${square.row}`) ?? [];\n  }\n\n  private translatePositionToAlgebraicNotation(position: Position): string {\n    const square: Square = { column: columns[position.x - 1], row: position.y as Row };\n    return `${square.column.toLowerCase()}${square.row}`;\n  }\n\n  private translatePositionToSquareNotation(position: Position): Square {\n    return { column: columns[position.x - 1], row: position.y as Row };\n  }\n\n  private translateSquareToAlgebraicNotation(square: Square): string {\n    return `${square.column.toLowerCase()}${square.row}`;\n  }\n\n  private onEvents(events: MoveResult[]): void {\n    events.forEach((event) => this.onEvent(event));\n  }\n\n  private onEvent(event: MoveResult) {\n    switch (event.eventType) {\n      case 'PieceWasCaptured':\n        this.view.capturePiece(this.translateSquareToAlgebraicNotation(event.onSquare));\n        break;\n      case 'PieceWasMoved':\n        this.view.movePiece(this.translateSquareToAlgebraicNotation(event.from), this.translateSquareToAlgebraicNotation(event.to));\n        break;\n      case 'PawnPromotionWasEnabled':\n        this.view.pawnPromotion();\n        break;\n      // case 'PawnWasPromoted':\n      //   this.view.afterPromotionPiece(\n      //     this.translateSquareToAlgebraicNotation(event.onSquare),\n      //     event.chosenPiece.name.toLowerCase(),\n      //     event.chosenPiece.side,\n      //   );\n      //   break;\n      default:\n        break;\n    }\n  }\n\n  private pieceMovement(position: Position, squaresStringArray: string[]) {\n    if (this.lastPossibleMoves.includes(this.translatePositionToAlgebraicNotation(position))) {\n      const moveEvents = this.chessModel.move(\n        this.translatePositionToSquareNotation(this.lastMoveAsPosition),\n        this.translatePositionToSquareNotation(position),\n      );\n      this.onEvents(moveEvents);\n      this.view.hideSelection();\n      this.view.hideAllAvailableMoves();\n    }\n    this.lastMoveAsPosition = position;\n    this.lastPossibleMoves = squaresStringArray;\n  }\n}\n","import { SquareColor } from './SquareColor';\n\nexport class Square {\n  constructor(private position_x: number, private position_y: number, private color: SquareColor) {}\n\n  setHtmlElement(): HTMLElement {\n    const squareElement = document.createElement('div');\n    squareElement.id = this.mapSquarePosition();\n    squareElement.setAttribute('data-testid', squareElement.id);\n    squareElement.classList.add('square');\n    squareElement.classList.add(`square--${this.color}`);\n    return squareElement;\n  }\n\n  mapSquarePosition(): string {\n    const columns = 'abcdefgh'.split('');\n    const rows = '12345678'.split('');\n    return `${columns[this.position_x - 1]}${rows[this.position_y - 1]}`;\n  }\n}\n","import { Square } from './Square';\nimport { SquareColor } from './SquareColor';\n\nexport class Chessboard {\n  constructor(\n    private id: string = 'chessboard',\n    private className: string = 'chessboard',\n    private readonly onSquareSelected: (position: { x: number; y: number }) => void,\n  ) {}\n\n  private setHtmlElement(): HTMLElement {\n    const boardElement = document.createElement('div');\n    boardElement.id = this.id;\n    boardElement.classList.add(this.className);\n    return boardElement;\n  }\n\n  createBoard(): HTMLElement {\n    const boardHtml = this.setHtmlElement();\n    for (let y = 8; y >= 1; y--) {\n      for (let x = 1; x <= 8; x++) {\n        const squareColor: SquareColor = (x + y) % 2 ? 'light' : 'dark';\n        const square = new Square(x, y, squareColor);\n        const squareHtml = square.setHtmlElement();\n        boardHtml.appendChild(squareHtml);\n        squareHtml.addEventListener('click', () => this.onSquareSelected({ x: x, y: y }));\n      }\n    }\n    return boardHtml;\n  }\n}\n","import { ViewEvent } from './ViewEvent';\n\nexport class SquareWasClicked implements ViewEvent {\n  readonly eventType: string = 'SquareWasClicked';\n\n  constructor(readonly position: { x: number; y: number }) {}\n}\n","import { ViewEvent } from './ViewEvent';\n\nexport class PromotionChosenPiece implements ViewEvent {\n  readonly eventType: string = 'PromotionChosenPiece';\n\n  constructor(readonly chosenPiece: string) {}\n}\n","import { Chessboard } from './Chessboard';\nimport { ChessBoardView } from '../ChessBoardView';\nimport { ViewEventBus } from '../events/ViewEventBus';\nimport { ViewEvent } from '../events/ViewEvent';\nimport { SquareWasClicked } from '../events/SquareWasClicked';\nimport { PromotionChosenPiece } from '../events/PromotionChosenPiece';\nimport { PiecesBoardPositions } from '../Types';\n\nexport class WebChessView implements ChessBoardView {\n  constructor(private readonly viewEventBus: ViewEventBus, private readonly parent: HTMLElement = document.body) {}\n\n  showChessBoard(piecesPositions: PiecesBoardPositions): void {\n    const chessboard: Chessboard = new Chessboard('chessBoardId', 'chessboard', (position) =>\n      this.viewEventBus.publish(new SquareWasClicked(position)),\n    );\n    this.parent.appendChild(chessboard.createBoard());\n\n    this.renderPiecesOnBoard(piecesPositions);\n  }\n\n  listenOn<EventType extends ViewEvent = ViewEvent>(eventType: EventType['eventType'], reaction: (event: EventType) => void): void {\n    this.viewEventBus.listenOn(eventType, reaction);\n  }\n\n  showSelectedPiece(id: string): void {\n    if (this.parent.querySelector(`#${id}`)?.hasChildNodes()) {\n      this.parent.querySelector(`#${id}`)?.classList.add('square--selected');\n    }\n  }\n\n  hideSelection(): void {\n    this.parent.querySelectorAll('.square')?.forEach((square) => {\n      square.classList.remove('square--selected');\n    });\n  }\n\n  showAvailableMoves(squaresToHighlight: string[]): void {\n    squaresToHighlight.forEach((square) => {\n      this.parent.querySelector(`#${square}`)?.classList.add('square--possibleMove');\n    });\n  }\n\n  hideAllAvailableMoves(): void {\n    this.parent.querySelectorAll('.square')?.forEach((square) => {\n      square.classList.remove('square--possibleMove');\n    });\n  }\n\n  movePiece(squareFrom: string, squareTo: string): void {\n    const divFrom = this.parent.querySelector(`#${squareFrom}`);\n    const divTo = this.parent.querySelector(`#${squareTo}`);\n    const pieceImage = divFrom?.firstChild;\n\n    if (pieceImage) {\n      divFrom?.removeChild(pieceImage);\n      divTo?.appendChild(pieceImage);\n    }\n  }\n\n  capturePiece(onSquare: string): void {\n    const divFrom = this.parent.querySelector(`#${onSquare}`);\n    const pieceImage = divFrom?.firstChild;\n\n    if (pieceImage) {\n      divFrom?.removeChild(pieceImage);\n    }\n  }\n\n  afterPromotionPiece(onSquare: string, piece: string, side: string) {\n    const divFrom = this.parent.querySelector(`#${onSquare}`);\n    const pieceImage = divFrom?.firstChild as HTMLImageElement;\n\n    if (pieceImage) {\n      pieceImage.src = `static/img/pieces/${side.toLowerCase()}-${piece.toLowerCase()}.svg`;\n    }\n  }\n\n  private renderPiecesOnBoard(piecesPositions: PiecesBoardPositions) {\n    Object.keys(piecesPositions)\n      .map((square) => {\n        const pieceName = piecesPositions[square].name.toLowerCase();\n        const pieceSide = piecesPositions[square].side.toLowerCase();\n        const pieceImage = `static/img/pieces/${pieceSide}-${pieceName}.svg`;\n        return { path: pieceImage, squareId: `#${square.toLowerCase()}`, square: square };\n      })\n      .forEach((element) => {\n        this.parent.querySelector(element.squareId)?.appendChild(this.createPieceDiv(element.path, element.square.toLowerCase()));\n      });\n  }\n\n  private createPieceDiv(pieceImage: string, id: string): HTMLElement {\n    const newPieceElement = document.createElement('img');\n    newPieceElement.classList.add('piece');\n    newPieceElement.setAttribute('id', `${id}-img`);\n    newPieceElement.setAttribute('data-testid', `${id}-img`);\n    newPieceElement.src = pieceImage;\n    return newPieceElement;\n  }\n\n  pawnPromotion(): void {\n    const promotionModal = document.createElement('div');\n    promotionModal.classList.add('modal');\n    document.body.appendChild(promotionModal);\n\n    const modalWindow = document.createElement('div');\n    modalWindow.classList.add('modal__window');\n    modalWindow.textContent = 'Choose your promotion pawn';\n    promotionModal.appendChild(modalWindow);\n\n    const modalPawnWrap = document.createElement('h1');\n    modalPawnWrap.classList.add('modal__wrap');\n    modalWindow.appendChild(modalPawnWrap);\n\n    const queenPromotion = document.createElement('div');\n    queenPromotion.classList.add('modal__pawn');\n    queenPromotion.textContent = 'Queen';\n    modalPawnWrap.appendChild(queenPromotion);\n\n    const rookPromotion = document.createElement('div');\n    rookPromotion.classList.add('modal__pawn');\n    rookPromotion.textContent = 'Rook';\n    modalPawnWrap.appendChild(rookPromotion);\n\n    const knightPromotion = document.createElement('div');\n    knightPromotion.classList.add('modal__pawn');\n    knightPromotion.textContent = 'Knight';\n    modalPawnWrap.appendChild(knightPromotion);\n\n    const bishopPromotion = document.createElement('div');\n    bishopPromotion.classList.add('modal__pawn');\n    bishopPromotion.textContent = 'Bishop';\n    modalPawnWrap.appendChild(bishopPromotion);\n\n    const clickedPawn = document.querySelectorAll('.modal__pawn');\n    clickedPawn.forEach((element) => {\n      element.addEventListener('click', () => {\n        // console.log(element.innerHTML);\n        this.viewEventBus.publish(new PromotionChosenPiece(element.innerHTML));\n        promotionModal.style.display = 'none';\n      });\n    });\n  }\n}\n","import { ViewEvent } from './ViewEvent';\nimport { ViewEventBus } from './ViewEventBus';\n\ntype EventListener = { readonly eventType: string; readonly reaction: (event: ViewEvent) => void };\n\n/**\n * Implementacja interfejsu ViewEventBus\n * Dzięki użyciu tej klasy np. inna klasa A może opublikować jakiś event (poinformować, że coś się u niej stało), np. że nastąpiło kliknięcie na przycisk.\n * Nie interesuje jej kto na to słucha i nie wywołuje bezpośrednio reakcji.\n * Klasa B może użyć funkcji listenOn aby nasłuchiwać na opublikowanie zdarzenie. Kiedy ktoś wywoła publish(TypZdarzenia),\n * zostaną wywołane wszystkie funkcje, które zostały przekazane jako parametr reaction metody listenOn, jeśli typ zdarzenia jest zgodny z oczekiwanym.\n */\nexport class InMemoryViewEventBus implements ViewEventBus {\n  private readonly listeners: EventListener[] = [];\n\n  publish(event: ViewEvent): void {\n    this.listeners.filter((it) => it.eventType === event.eventType).forEach((it) => it.reaction(event));\n  }\n\n  listenOn<EventType extends ViewEvent>(eventType: EventType['eventType'], reaction: (event: EventType) => void): void {\n    this.listeners.push({ eventType, reaction: reaction as (event: ViewEvent) => void });\n  }\n}\n","import { ChessBoardPresenter } from './presenter/ChessBoardPresenter';\nimport { ChessBoardView } from './view/ChessBoardView';\nimport { WebChessView } from './view/web/WebChessView';\nimport { Chessboard, ChessEngine, ChessModel } from './model';\nimport { InMemoryViewEventBus } from './view/events/InMemoryViewEventBus';\n\nexport const App = (): void => {\n  const viewEventBus = new InMemoryViewEventBus();\n  const chessBoardView: ChessBoardView = new WebChessView(viewEventBus);\n  const chessBoard: Chessboard = new Chessboard();\n  const chessModel: ChessModel = new ChessEngine(chessBoard);\n  const presenter = new ChessBoardPresenter(chessBoardView, chessModel);\n  presenter.startGame();\n};\n","import 'regenerator-runtime/runtime'; //async/await with Parcel\nimport { App } from './app/App';\n\nimport '../sass/style.scss';\n\nwindow.onload = () => App();\n"]}